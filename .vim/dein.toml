[[plugins]]
repo = 'rhysd/vim-healthcheck'

[[plugins]]
repo = 'cacharle/c_formatter_42.vim'

[[plugins]]
repo = '42Paris/42header'

[[plugins]]
repo = 'Shougo/vimproc.vim'
build = 'make'

[[plugins]]
repo = 'dense-analysis/ale'
hook_add = '''
 " キャッシュを用いて高速化
 let g:ale_cache_executable_check_failures = 1
 let g:airline#extensions#lsp#enabled = 0
 " シンボルカラムを表示したままにする
 let g:ale_sign_column_always = 1
 " 保存時に整形してくれる
 let g:ale_fix_on_save = 0
 " 補完してくれる
 let g:ale_completion_enabled = 0
 " エラー行に表示するマーク
 let g:ale_sign_error = '⨉'
 let g:ale_sign_warning = '⚠'
 " エラー行にカーソルをあわせた際に表示されるメッセージフォーマット
 let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
 let g:ale_statusline_format = ['⨉ %d', '⚠ %d', '⬥ ok']
 let g:ale_linters = {
     \   'c' : ['clangd'],
     \   'cpp' : ['clangd']
 \}
'''

#[[plugins]]
#repo = 'mattn/vim-sonictemplate'

[[plugins]]
repo = 'preservim/tagbar'
[[plugins]]
repo = 'hushicai/tagbar-javascript.vim'

[[plugins]]
repo = 'thinca/vim-quickrun'
hook_source = '''
let g:quickrun_config = {'*': {'hook/time/enable': '1'},}
let g:quickrun_config = {
\	'gcc' : {
\		'cmdopt': '-lstdc++',
\		'hook/time/enable' : 1,
\	 }
\}
let g:quickrun_config._ = {
\		'runner':'vimproc',
\		"runner/vimproc/updatetime" : 10,
\		"outputter/buffer/close_on_empty" : 1,
\ }
'''

#[[plugins]]
#repo = 'vim-syntastic/syntastic'

# fuzzy
[[plugins]]
repo = 'junegunn/fzf'
merged = 0
build = '''
./install --all
'''

[[plugins]]
repo = 'junegunn/fzf.vim'
hook_add = '''
nnoremap <silent> <Leader>. :<C-u>FZFFileList<CR>
nnoremap <silent> <Leader>, :<C-u>FZFMru<CR>
nnoremap <silent> <Leader>l :<C-u>Lines<CR>
nnoremap <silent> <Leader>b :<C-u>Buffers<CR>
nnoremap <silent> <Leader>k :<C-u>Rg<CR>
command! FZFFileList call fzf#run({
            \ 'source': 'rg --files --hidden',
            \ 'sink': 'e',
            \ 'options': '-m --border=none',
            \ 'down': '20%'})
command! FZFMru call fzf#run({
            \ 'source': v:oldfiles,
            \ 'sink': 'e',
            \ 'options': '-m +s --border=none',
            \ 'down':  '20%'})

let g:fzf_layout = {'up':'~90%', 'window': { 'width': 0.8, 'height': 0.8,'yoffset':0.5,'xoffset': 0.5, 'border': 'none' } }

augroup vimrc_fzf
autocmd!
autocmd FileType fzf tnoremap <silent> <buffer> <Esc> <C-g>
autocmd FileType fzf set laststatus=0 noshowmode noruler
      \| autocmd BufLeave <buffer> set laststatus=2 noshowmode ruler
augroup END

function! RipgrepFzf(query, fullscreen)
    let command_fmt = 'rg --column --hiddden --line-number --no-heading --color=always --smart-case %s || true'
    let initial_command = printf(command_fmt, shellescape(a:query))
    let reload_command = printf(command_fmt, '{q}')
    let spec = {'options': ['--phony', '--query', a:query, '--bind', 'change:reload:'.reload_command]}
    call fzf#vim#grep(initial_command, 1, fzf#vim#with_preview(spec), a:fullscreen)
endfunction

command! -nargs=* -bang RG call RipgrepFzf(<q-args>, <bang>0)
'''

#[[plugins]]
#repo = 'rking/ag.vim'
#[[plugins]]
#repo = 'critiqjo/lldb.nvim'

################
# Git          #
################
[[plugins]]
repo = 'airblade/vim-gitgutter'
hook_add = '''
set signcolumn=yes
set updatetime=1000

nnoremap [gitgutter] <Nop>
nmap <C-g> [gitgutter]
nmap [gitgutter]j <Plug>(GitGutterNextHunk)
nmap [gitgutter]k <Plug>(GitGutterPrevHunk)
nmap [gitgutter]u <Plug>(GitGutterUndoHunk)
'''
[[plugins]]
repo = 'lambdalisue/gina.vim'
hook_add = '''
nnoremap <silent> <leader>gs :<C-u>GStatus<CR>
nnoremap <silent> <leader>gS :<C-u>GitShowViewer<CR>
nnoremap <silent> <leader>gc :<C-u>GCommit<CR>
nnoremap <silent> <leader>gC :<C-u>GCommitAmmend<CR>
nnoremap <silent> <leader>ga :<C-u>GAddPatch<CR>
nnoremap <silent> <leader>gl :<C-u>GLog<CR>
nnoremap <silent> <leader>gL :<C-u>GLogPatch<CR>
nnoremap <silent> <leader>go :<C-u>GLogOneline --pretty='%h %ad %s' --date='format:%Y-%m-%d %H:%M'<CR>
nnoremap <silent> <leader>gd :<C-u>GDiff<CR>
nnoremap <silent> <leader>gb :<C-u>GBrahcnAll<CR>
nnoremap <silent> <leader>gt :<C-u>GLogTree<CR>
nnoremap <silent> <leader>gT :<C-u>GLogTreeAll<CR>
nnoremap <silent> 'gs :<C-u>tabnew \| GStatus<CR>
nnoremap <silent> 'gl :<C-u>tabnew \| GLog<CR>
nnoremap <silent> 'gL :<C-u>tabnew \| GLogPatch<CR>
nnoremap <silent> 'go :<C-u>tabnew \| GLogOneline --pretty='%h %ad %s' --date='format:%Y-%m-%d %H:%M'<CR>
'''
[[plugins]]
repo = 'rhysd/committia.vim'
hook_add = '''
let g:committia_hooks = {}
function! g:committia_hooks.edit_open(info)
    " Additional settings
    setlocal spell

    " If no commit message, start with insert mode
    if a:info.vcs ==# 'git' && getline(1) ==# ''
        startinsert
    endif

    " Scroll the diff window from insert mode
    " Map <C-n> and <C-p>
    imap <buffer><C-n> <Plug>(committia-scroll-diff-down-half)
    imap <buffer><C-p> <Plug>(committia-scroll-diff-up-half)
endfunction
'''

##################
# Color Themes   #
##################
[[plugins]]
repo = 'ajmwagar/vim-deus'
[[plugins]]
repo = 'sainnhe/sonokai'
[[plugins]]
repo = 'sainnhe/everforest'
# [[plugins]]
# repo = 'EdenEast/nightfox.nvim'
[[plugins]]
repo = 'savq/melange'
[[plugins]]
repo = 'joshdick/onedark.vim'
[[plugins]]
repo = 'cocopon/iceberg.vim'
[[plugins]]
repo = 'altercation/vim-colors-solarized'
[[plugins]]
repo = 'morhetz/gruvbox'
[[plugins]]
repo = 'sainnhe/gruvbox-material'
[[plugins]]
repo = 'ayu-theme/ayu-vim'

[[plugins]]
repo = 'kien/rainbow_parentheses.vim'
hook_source = '''
autocmd VimEnter * RainbowParenthesesToggle
autocmd Syntax * RainbowParenthesesLoadRound
autocmd Syntax * RainbowParenthesesLoadSquare
autocmd Syntax * RainbowParenthesesLoadBraces

let g:rbpt_max = 16
let g:rbpt_loadcmd_toggle = 0
'''

[[plugins]]
repo = 'itchyny/lightline.vim'

###############
# Language    #
###############

# [[plugins]]
# repo = 'sheerun/vim-polyglot'
# hook_add = '''
#     " 補完時に自動でrustfmt
#     let g:rustfmt_autosave = 1
# '''

# # Haskell
# [[plugins]]
# repo = 'eagletmt/ghcmod-vim'
# [[plugins]]
# repo = 'kana/vim-filetype-haskell'

# # TypeScript
# [[plugins]]
# repo = 'leafgarland/typescript-vim'
# [[plugins]]
# repo = 'Quramy/tsuquyomi'
# [[plugins]]
# repo = 'prettier/vim-prettier'
# build = 'npm install'
# hook_add = '''
# let g:prettier#autoformat = 1
# let g:prettier#autoformat_require_pragma = 0
# '''

##############
# 拡張画面   #
##############
[[plugins]]
repo = 'vim-airline/vim-airline'
hook_add = '''
    " タブラインの表示
    let g:airline#extensions#tabline#enabled = 1
    " （タブが一個の場合）バッファのリストをタブラインに表示する機能をオフ
    let g:airline#extensions#tabline#show_buffers = 0
    " 0でそのタブで開いてるウィンドウ数、1で左のタブから連番
    let g:airline#extensions#tabline#tab_nr_type = 1
    " パワーラインフォントの使用
    let g:airline_powerline_fonts = 1
    " aleの表示
    " let g:airline#extensions#ale#enabled = 1
    " Do not collapse the status line while having multiple windows
    let g:airline_inactive_collapse = 0
    " tagbarの表示
    let g:airline#extensions#tagbar#enabled = 1
    " virtualenvを有効
    let g:airline#extensions#virtualenv#enabled = 1
'''

[[plugins]]
repo = 'vim-airline/vim-airline-themes'

[[plugins]]
repo = 'scrooloose/nerdtree'
hook_add = '''
    " 隠しファイルを設定する
    let NERDTreeShowHidden = 1
    " オブジェクトファイルなどを除外する
    let NERDTreeIgnore = ['.[oa]$', '.(so)$', '.(tgz|gz|zip)$' ]
'''

[[plugins]]
repo = 'jistr/vim-nerdtree-tabs'
hook_add = '''
    " トグル設定
    map <C-e> <plug>NERDTreeTabsToggle<CR>
    " 起動時有効
    let g:nerdtree_tabs_open_on_console_startup=0
    " 自動でタブを開く
    let g:nerdtree_tabs_autofind=1
    " 起動時にファイルにカーソルを合わせる
    function! s:MoveCursorAtStart()
     call feedkeys("\<C-w>l")
    endfunction
    " autocmd VimEnter * NERDTree | call s:MoveCursorAtStart()
'''
depends = ['nerdtree']

[[plugins]]
repo = 'Xuyuanp/nerdtree-git-plugin'

[[plugins]]
repo = 'farmergreg/vim-lastplace'

# [[plugins]]
# repo = 'twitVim/twitvim'
# hook_source = '''
# let twitvim_enable_python = 1
# let twitvim_force_ssl = 1
# let twitvim_count = 100
# '''

[[plugins]]
repo = 'voldikss/vim-floaterm'
on_cmd = 'FloatermNew'
on_func = 'floaterm#'
hook_add = '''
  " exit してもウィンドウが残ると閉じないといけないので
  let g:floaterm_autoclose = 1

  nnoremap <expr> <M-t> floaterm#buflist#first() == -1 ? '<Cmd>FloatermNew<CR>' : '<Cmd>FloatermToggle<CR>'
'''
#hook_source = '''
#  autocmd vimrc User FloatermOpen tnoremap <buffer> <silent> <M-t> <C-\><C-n>:FloatermToggle<CR>
#  autocmd vimrc User FloatermOpen tnoremap <buffer> <silent> <C-t> <C-\><C-n>:FloatermNew<CR>
#  autocmd vimrc User FloatermOpen tnoremap <buffer> <silent> <C-k> <C-\><C-n>:FloatermPrev<CR>
#  autocmd vimrc User FloatermOpen tnoremap <buffer> <silent> <C-j> <C-\><C-n>:FloatermNext<CR>
#
#  autocmd vimrc QuitPre * FloatermKill!
#'''

# :Goyo :Goyo!
[[plugins]]
repo = 'junegunn/goyo.vim'

# [[plugins]]
# repo = 'itchyny/calendar.vim'

[[plugins]]
repo = 'christoomey/vim-tmux-navigator'
hook_source = '''
let g:tmux_navigator_no_mappings = 1

nnoremap <silent> <C-h> :TmuxNavigateLeft<cr>
nnoremap <silent> <C-j> :TmuxNavigateDown<cr>
nnoremap <silent> <C-k> :TmuxNavigateUp<cr>
nnoremap <silent> <C-l> :TmuxNavigateRight<cr>
nnoremap <silent> <C-;> :TmuxNavigatePrevious<cr>
'''

[[plugins]]
repo = 'myusuf3/numbers.vim'

#################
# キー拡張機能  #
#################
[[plugins]]
repo = 'rhysd/clever-f.vim'
[[plugins]]
repo = 'aiya000/vim-fmap'
on_map = [
    '<Plug>(fmap-forward-f)',
    '<Plug>(fmap-backward-f)',
    '<Plug>(fmap-forward-t)',
    '<Plug>(fmap-backward-t)',
]
on_cmd = 'FNoreMap'
[[plugins]]
repo = 'kana/vim-smarttill'
hook_add = '''
map ,t  <Plug>(smartword-t)
map ,T  <Plug>(smartword-T)
'''
# -s 2文字
[[plugins]]
repo = 'easymotion/vim-easymotion'
hook_source = '''
map <leader>s <Plug>(easymotion-bd-f2)
nmap <leader>s <Plug>(easymotion-overwin-f2)
'''
# -ra -rc
[[plugins]]
repo = 'kqito/vim-easy-replace'
[[plugins]]
repo = 'tyru/open-browser.vim'
hook_add = '''
" nmap @ <Nop>
" nmap @g <Plug>(openbrowser-search)
" nmap <C-@> <Plug>(openbrowser-smart-search)
" nnoremap @o :<C-u>execute 'OpenBrowserSearch -alc' expand('<cWORD>')<CR>
" nnoremap @d :<C-u>execute 'OpenBrowserSearch -dev' expand('<cWORD>')<CR>
" let g:openbrowser_search_engines = {
"     \ 'alc': 'http://eow.alc.co.jp/{query}/UTF-8/',
"     \ 'dev': 'https://dev.classmethod.jp/?s={query}',
"     \ }
'''
# <Space>m
[[plugins]]
repo = "t9md/vim-quickhl"
hook_add = '''
" カーソル下のハイライトをトグルする
map <Space>m <Plug>(quickhl-manual-this)
" ハイライトをすべて消す
map <Space>M <Plug>(quickhl-manual-reset)
'''
[[plugins]]
repo = 'osyo-manga/vim-anzu'
hook_add = '''
nmap n <Plug>(anzu-n-with-echo)
nmap N <Plug>(anzu-N-with-echo)
nmap * <Plug>(anzu-star)
nmap # <Plug>(anzu-sharp)
'''
[[plugins]]
repo = 'LeafCage/yankround.vim'
hook_add = '''
nmap p <Plug>(yankround-p)
xmap p <Plug>(yankround-p)
nmap P <Plug>(yankround-P)
nmap gp <Plug>(yankround-gp)
xmap gp <Plug>(yankround-gp)
nmap gP <Plug>(yankround-gP)
nmap <C-p> <Plug>(yankround-prev)
nmap <C-n> <Plug>(yankround-next)
'''
# "&y "&p
[[plugins]]
repo = 'kana/vim-fakeclip'
[[plugins]]
repo = 'kana/vim-submode'
hook_add = '''
" call submode#enter_with('winsize', 'n', '', '<C-w>>', '<C-w>>')
" call submode#enter_with('winsize', 'n', '', '<C-w><', '<C-w><')
" call submode#enter_with('winsize', 'n', '', '<C-w>+', '<C-w>+')
" call submode#enter_with('winsize', 'n', '', '<C-w>-', '<C-w>-')
" call submode#map('winsize', 'n', '', '>', '<C-w>>')
" call submode#map('winsize', 'n', '', '<', '<C-w><')
" call submode#map('winsize', 'n', '', '+', '<C-w>+')
" call submode#map('winsize', 'n', '', '-', '<C-w>-')
'''

##############
# operator   #
##############
[[plugins]]
repo = 'kana/vim-operator-user'
[[plugins]]
repo = 'rhysd/vim-operator-surround'
hook_add = '''
" operator mappings
map <silent>sa <Plug>(operator-surround-append)
map <silent>sd <Plug>(operator-surround-delete)
map <silent>sr <Plug>(operator-surround-replace)


" delete or replace most inner surround

" if you use vim-textobj-multiblock
nmap <silent>sdd <Plug>(operator-surround-delete)<Plug>(textobj-multiblock-a)
nmap <silent>srr <Plug>(operator-surround-replace)<Plug>(textobj-multiblock-a)

" if you use vim-textobj-anyblock
nmap <silent>sdd <Plug>(operator-surround-delete)<Plug>(textobj-anyblock-a)
nmap <silent>srr <Plug>(operator-surround-replace)<Plug>(textobj-anyblock-a)

" if you use vim-textobj-between
nmap <silent>sdb <Plug>(operator-surround-delete)<Plug>(textobj-between-a)
nmap <silent>srb <Plug>(operator-surround-replace)<Plug>(textobj-between-a)
'''
[[plugins]]
repo = 'sgur/vim-operator-openbrowser'
hook_add = '''
nmap <Leader>x <Plug>(operator-openbrowser)
vmap <Leader>x <Plug>(operator-openbrowser)
'''

##############
# textobj    #
##############
[[plugins]]
repo = 'kana/vim-textobj-user'
hook_add = '''
" call textobj#user#plugin('braces', {
" \   'da': {
" \     'pattern': '|',
" \     'select-a': 'aA',
" \     'select-i': 'iA',
" \   },
" \ })
'''
# ae ie
[[plugins]]
repo = 'kana/vim-textobj-entire'
# al il
[[plugins]]
repo = 'kana/vim-textobj-line'
# af if
[[plugins]]
repo = 'kana/vim-textobj-function'
# af if
[[plugins]]
repo = 'bps/vim-textobj-python'
# ab ib <- a' a" a`
[[plugins]]
repo = 'thinca/vim-textobj-between'
# ai ii
[[plugins]]
repo = 'kana/vim-textobj-indent'
[[plugins]]
repo = 'rbonvall/vim-textobj-latex'
# ab ib
[[plugins]]
repo = 'osyo-manga/vim-textobj-multiblock'
hook_source = '''
omap ab <Plug>(textobj-multiblock-a)
omap ib <Plug>(textobj-multiblock-i)
xmap ab <Plug>(textobj-multiblock-a)
xmap ib <Plug>(textobj-multiblock-i)
'''
# 矩形
[[plugins]]
repo = 'osyo-manga/vim-textobj-blockwise'
[[plugins]]
repo = 'sgur/vim-textobj-parameter'
# gc
[[plugins]]
repo = 'glts/vim-textobj-comment'
[[plugins]]
repo = 'tpope/vim-commentary'


# |test  ->  (testになってほしいが()testになってしまう
# vim-surroundはそうだが自分の思考がvimに追いついていかない
[[plugins]]
repo = 'jiangmiao/auto-pairs'
hook_add = '''
let g:AutoPairsMultilineClose = 0
'''

##############
# Session    #
##############
[[plugins]]
repo = 'mhinz/vim-startify'
# [[plugins]]
# repo = 'mhinz/vim-signify'
# branch = 'legacy'
[[plugins]]
repo = 'tpope/vim-obsession'
hook_source = '''
let g:session_directory = '~/.vim/session'
let g:session_autoload = "no"
let g:session_autosave = "no"
'''

[[plugins]]
repo = 'osyo-manga/vim-watchdogs'
[[plugins]]
repo = 'roxma/vim-hug-neovim-rpc'

# [[plugins]]
# repo = 'Shougo/vimshell'
# repo = 'Shougo/deol.nvim'

[[plugins]]
repo = 'lambdalisue/suda.vim'

[[plugins]]
repo = 'ConradIrwin/vim-bracketed-paste'
