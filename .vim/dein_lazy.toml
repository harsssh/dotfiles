
# [[plugins]]
# repo = 'Shougo/deoplete.nvim'
# depends = 'context_filetype.vim'
# on_i = 1
# hook_source = '''
#     call deoplete#enable()
#     " No display of the number of competion list
#     set shortmess+=c
#     set completeopt+=noinsert

#     " <TAB>: completion.
#     inoremap <silent><expr> <TAB>
#          \ pumvisible() ? "\<C-n>" :
#           \ <SID>check_back_space() ? "\<TAB>" :
#           \ deoplete#manual_complete()
#     function! s:check_back_space() abort
#       let col = col('.') - 1
#       return !col || getline('.')[col - 1]  =~ '\s'
#     endfunction

#     " <S-TAB>: completion back.
#     inoremap <expr><S-TAB>  pumvisible() ? "\<C-p>" : "\<C-h>"
#     " <C-e>: popup cancel
#     inoremap <expr><C-e>       deoplete#cancel_popup()

#     call deoplete#custom#source('_', 'matchers', ['matcher_head'])
#     call deoplete#custom#source('_', 'converters', [
#           \ 'converter_remove_paren',
#           \ 'converter_remove_overlap',
#           \ 'matcher_length',
#           \ 'converter_truncate_abbr',
#           \ 'converter_truncate_menu',
#           \ 'converter_auto_delimiter',
#           \ ])
#     call deoplete#custom#option('keyword_patterns', {
#           \ '_': '[a-zA-Z_]\k*\(?',
#           \ 'tex': '[^\w|\s][a-zA-Z_]\w*',
#           \ })
#     call deoplete#custom#option('camel_case', v:true)
#     call deoplete#custom#option('camel_case', v:true)

#     " Vim起動時にneocompleteを有効にする
#     let g:deoplete#enable_at_startup = 1
#     " smartcase有効化. 大文字が入力されるまで大文字小文字の区別を無視する
#     call deoplete#custom#source('_', 'smart_case', v:true)
#     " 3文字以上の単語に対して補完を有効にする
#     " let g:neocomplete#min_keyword_length = 3
#     " 区切り文字まで補完する
#     " let g:neocomplete#enable_auto_delimiter = 1
#     " 1文字目の入力から補完のポップアップを表示
#     call deoplete#custom#source('_', 'min_pattern_length', 1)
#     " バックスペースで補完のポップアップを閉じる
#     " inoremap <expr><BS> neocomplete#smart_close_popup()."<C-h>"

#     " エンターキーで補完候補の確定. スニペットの展開もエンターキーで確定・・・・・・②
#     " imap <expr><CR> neosnippet#expandable() ? "<Plug>(neosnippet_expand_or_jump)" : pumvisible() ? "<C-y>" : "<CR>"
#     " タブキーで補完候補の選択. スニペット内のジャンプもタブキーでジャンプ・・・・・・③
#     " imap <expr><TAB> pumvisible() ? "<C-n>" : neosnippet#jumpable() ? "<Plug>(neosnippet_expand_or_jump)" : "<TAB>"
# '''

[[plugins]]
repo = 'Shougo/ddc.vim'
on_event = 'InsertEnter'
depends = [
	'ddc-matcher_head',
	'ddc-sorter_rank',
	'ddc-around',
	'pum.vim',
	'denops.vim',
]
hook_source = '''
call ddc#custom#patch_global('sources', ['around', 'vim-lsp'])
call ddc#custom#patch_global('sourceOptions', {
	\ '_': {
	\   'matchers': ['matcher_head'],
	\   'sorters': ['sorter_rank']
	\ },
	\ 'around': {'mark': 'around'},
	\ 'vim-lsp': {
	\   'matchers': ['matcher_head'],
	\   'mark': 'lsp',
	\   'forceCompletionPattern': '\.\w*|:\w*|->\w*'},
	\ })
call ddc#custom#patch_global('sourceParams', {
	\ 'around': {'maxSize': 500},
	\ 'vim-lsp': { 'kindLabels': { 'Class': 'c' } },
	\ })

call ddc#custom#patch_global('completionMenu', 'pum.vim')

" Customize settings on a filetype
call ddc#custom#patch_filetype(['c', 'cpp'], 'sources', ['around', 'clangd'])
call ddc#custom#patch_filetype(['c', 'cpp'], 'sourceOptions', {
	\ 'clangd': {'mark': 'C'},
	\ })
call ddc#custom#patch_filetype('markdown', 'sourceParams', {
	\ 'around': {'maxSize': 100},
	\ })

" Mappings

" <TAB>: completion.
inoremap <silent><expr> <TAB>
\ pumvisible() ? '<C-n>' :
\ (col('.') <= 1 <Bar><Bar> getline('.')[col('.') - 2] =~# '\s') ?
\ '<TAB>' : ddc#map#manual_complete()

" <S-TAB>: completion back.
inoremap <expr><S-TAB>  pumvisible() ? '<C-p>' : '<C-h>'

" Use ddc.
call ddc#enable()
'''

[[plugins]]
repo = 'Shougo/ddc-around'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-matcher_head'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-sorter_rank'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-converter_remove_overlap'
on_source = 'ddc.vim'

[[plugins]]
repo = 'prabirshrestha/vim-lsp'
on_source = 'ddc.vim'
hook_source = '''
    let g:lsp_diagnostics_echo_cursor = 1
'''
[[plugins]]
repo = 'mattn/vim-lsp-settings'
on_source = 'ddc.vim'
[[plugins]]
repo = 'shun/ddc-vim-lsp'
on_source = 'ddc.vim'
# [[plugins]]
# repo = 'Shougo/ddc-nvim-lsp'
# on_source = 'ddc.vim'

[[plugins]]
repo = 'rafamadriz/friendly-snippets'

[[plugins]]
repo = 'hrsh7th/vim-vsnip'
on_event = 'InsertEnter'
depends = ['vim-vsnip-integ', 'friendly-snippets']
hook_add = '''
imap <expr> <C-j> vsnip#expandable() ? '<Plug>(vsnip-expand)' : '<C-j>'
smap <expr> <C-j> vsnip#expandable() ? '<Plug>(vsnip-expand)' : '<C-j>'
imap <expr> <C-f> vsnip#jumpable(1)  ? '<Plug>(vsnip-jump-next)' : '<C-f>'
smap <expr> <C-f> vsnip#jumpable(1)  ? '<Plug>(vsnip-jump-next)' : '<C-f>'
imap <expr> <C-b> vsnip#jumpable(-1) ? '<Plug>(vsnip-jump-prev)' : '<C-b>'
smap <expr> <C-b> vsnip#jumpable(-1) ? '<Plug>(vsnip-jump-prev)' : '<C-b>'
let g:vsnip_filetypes = {}
'''

[[plugins]]
repo = 'hrsh7th/vim-vsnip-integ'

[[plugins]]
repo = 'matsui54/denops-signature_help'
on_source = 'ddc.vim'
hook_source = '''
call signature_help#enable()
'''

[[plugins]]
repo = 'matsui54/denops-popup-preview.vim'
on_source = 'ddc.vim'
hook_source = '''
call popup_preview#enable()
'''

[[plugins]]
repo = 'Shougo/deoppet.nvim'

