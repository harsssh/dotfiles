[[plugins]]
repo = 'vim-denops/denops.vim'
on_func = 'denops#server#start'
hook_source = 'call denops#server#start()'

#     nmap <Space> [denite]
#     nmap <Space>p [deniteProject]
#     nmap <silent> [denite]m :<C-u>Denite file_mru<CR> <silent> <C-u><C-y> :<C-u>Denite neoyank<CR>
#     if executable('rg')
#         call denite#custom#var('file/rec', 'command', ['rg', '--files', '--glob', '!.git'])
#         call denite#custom#var('file_rec', 'command', ['rg', '--files', '--glob', '!.git'])
#         call denite#custom#var('grep', 'command', ['rg', '--threads', '1'])
#         call denite#custom#var('grep', 'recursive_opts', [])
#         call denite#custom#var('grep', 'final_opts', [])
#         call denite#custom#var('grep', 'separator', ['--'])
#         call denite#custom#var('grep', 'default_opts', ['--vimgrep', '--no-heading'])
#     endif

#     call denite#custom#filter('matcher_ignore_globs', 'ignore_globs', [
#                 \ '.git/', 'build/', '__pycache__/',
#                 \ 'images/', '*.o', '*.make', '*.min.*',
#                 \ 'img/', 'fonts/', '*~', '*.exe', '*.bak',
#                 \ '.DS_Store', '*.pyc', '*.class', 'tags'
#                 \ ])
#     '''

# fuzzy filer: unite.vim >> denite.nvim >> ddu.vim
[[plugins]]
repo = 'Shougo/ddu.vim'
depends = ['denops.vim']
hook_source = '''
call ddu#custom#patch_global({
    \   'ui': 'ff',
    \   'sources': [
    \     {'name': 'file'},
    \     {'name': 'buffer'},
    \     {'name': 'make'},
    \     {'name': 'file_old'},
    \     {'name': 'file_rec', 'params': {}},
    \     {'name': 'colorscheme'},
    \   ],
    \   'sourceOptions': {
    \     '_': {
    \       'matchers': [
    \         'matcher_substring',
    \         'matcher_relative',
    \       ],
    \       'columns': [
    \         'filename',
    \       ],
    \     },
    \   },
    \   'kindOptions': {
    \     'file': {
    \       'defaultAction': 'open',
    \     },
    \     'colorscheme': {
    \       'defaultAction': 'set',
    \     },
    \   },
    \   'actionOptions': {
    \     'narrow': {
    \       'quit': v:false,
    \     },
    \   },
    \   'uiParams': {
    \     'filer': {
    \       'split': 'vertical',
    \     },
    \     'ff': {
    \       'autoAction': {'name': 'preview'},
    \       'startFilter': v:true,
    \       'split': 'vertical',
    \       'splitDirection': 'topleft',
    \       'winWidth': &columns / 4,
    \       'previewVertical': v:false,
    \       'previewHeight': &lines / 2,
    \       'displaySourceName': 'short',
    \       'displayTree': v:true,
    \       'highlights': {'selected': 'Statement'},
    \     },
    \   },
    \   'sourceParams': {
    \     'rg' : {
    \       'args': ['--column', '--no-heading', '--color', 'never'],
    \     },
    \   },
    \   'filterParams': {
    \     'matcher_substring': {
    \     },
    \   },
    \ })

autocmd FileType ddu-ff call s:ddu_my_settings()
function! s:ddu_my_settings() abort
  nnoremap <buffer><silent> <CR>
        \ <Cmd>call ddu#ui#ff#do_action('itemAction')<CR>
  nnoremap <buffer><silent> <Space>
        \ <Cmd>call ddu#ui#ff#do_action('toggleSelectItem')<CR>
  nnoremap <buffer> i
        \ <Cmd>call ddu#ui#ff#do_action('openFilterWindow')<CR>
  nnoremap <buffer> o
        \ <Cmd>call ddu#ui#ff#do_action('expandItem', {'mode': 'toggle'})<CR>
  nnoremap <buffer><silent> q
        \ <Cmd>call ddu#ui#ff#do_action('quit')<CR>
  nnoremap <buffer> >
        \ <Cmd>call ddu#ui#ff#do_action('updateOptions', {'sourceOptions': {
        \   '_': {
        \     'matchers': ToggleHidden(),
        \   },
        \ }})<CR>
endfunction

function! ToggleHidden()
  let current = ddu#custom#get_current(b:ddu_ui_name)
  let source_options = get(current, 'sourceOptions', {})
  let source_options_all = get(source_options, '_', {})
  let matchers = get(source_options_all, 'matchers', [])
  return empty(matchers) ? ['matcher_hidden'] : []
endfunction

autocmd FileType ddu-ff-filter call s:ddu_filter_my_settings()
function! s:ddu_filter_my_settings() abort
  inoremap <buffer><silent> <CR>
  \ <Esc><Cmd>close<CR>
  nnoremap <buffer><silent> <CR>
  \ <Cmd>close<CR>
  nnoremap <buffer><silent> q
  \ <Cmd>close<CR>
endfunction
'''
hook_add = '''
nmap <silent> ;f <Cmd>call ddu#start({})<CR>
nmap <silent> ;t <Cmd>call ddu#start({'sources': [{'name': 'file_rec', 'params': {'path': expand('~')}}]})<CR>
nmap <silent> ;g <Cmd>call ddu#start({'sources': [{'name': 'rg', 'params': {'input': expand('<cword>')}}]})<CR>
'''

# Install your UIs
[[plugins]]
repo = 'Shougo/ddu-ui-ff'
on_source = 'ddu.vim'
[[plugins]]
repo = 'Shougo/ddu-ui-filer'
on_source = 'ddu.vim'

# Install your sources
[[plugins]]
repo = 'Shougo/ddu-source-file'
on_source = 'ddu.vim'
[[plugins]]
repo = 'Shougo/ddu-source-file_rec'
on_source = 'ddu.vim'
[[plugins]]
repo = 'Shougo/ddu-source-file_old'
on_source = 'ddu.vim'
[[plugins]]
repo = 'shun/ddu-source-buffer'
on_source = 'ddu.vim'
[[plugins]]
repo = 'shun/ddu-source-rg'
on_source = 'ddu.vim'
[[plugins]]
repo = 'tennashi/ddu-source-make'
on_source = 'ddu.vim'
[[plugins]]
repo = '4513ECHO/ddu-source-colorscheme'
on_source = 'ddu.vim'
[[plugins]]
repo = 'matsui54/ddu-source-command_history'
on_source = 'ddu.vim'

# Install filters
[[plugins]]
repo = 'Shougo/ddu-filter-matcher_substring'
on_source = 'ddu.vim'
[[plugins]]
repo = 'Shougo/ddu-filter-matcher_relative'
on_source = 'ddu.vim'

# Install kinds
[[plugins]]
repo = 'Shougo/ddu-kind-file'
on_source = 'ddu.vim'

# Install columns
[[plugins]]
repo = 'Shougo/ddu-column-filename'
on_source = 'ddu.vim'
[[plugins]]
repo = 'ryota2357/ddu-column-icon_filename'
on_source = 'ddu.vim'

# Install others
[[plugins]]
repo='Shougo/ddu-commands.vim'
on_source = 'ddu.vim'

# [[plugins]]
# repo = 'Shougo/deoplete.nvim'
# depends = 'context_filetype.vim'
# on_i = 1
# hook_source = '''
#     " No display of the number of competion list
#     set shortmess+=c
#     set completeopt+=noinsert
#     call deoplete#custom#source('_', 'converters', [
#           \ 'converter_remove_paren',
#           \ 'converter_remove_overlap',
#           \ 'matcher_length',
#           \ 'converter_truncate_abbr',
#           \ 'converter_truncate_menu',
#           \ 'converter_auto_delimiter',
#           \ ])
#     call deoplete#custom#option('keyword_patterns', {
#           \ '_': '[a-zA-Z_]\k*\(?',
#           \ 'tex': '[^\w|\s][a-zA-Z_]\w*',
#           \ })
#     call deoplete#custom#option('camel_case', v:true)

#     " Vim起動時にneocompleteを有効にする
#     let g:deoplete#enable_at_startup = 1
#     " smartcase有効化. 大文字が入力されるまで大文字小文字の区別を無視する
#     call deoplete#custom#source('_', 'smart_case', v:true)

#     " 区切り文字まで補完する
#     " let g:neocomplete#enable_auto_delimiter = 1
#     " 1文字目の入力から補完のポップアップを表示
#     call deoplete#custom#source('_', 'min_pattern_length', 1)
#     " バックスペースで補完のポップアップを閉じる
#     " inoremap <expr><BS> neocomplete#smart_close_popup()."<C-h>"

#     " エンターキーで補完候補の確定. スニペットの展開もエンターキーで確定・・・・・・②
#     " imap <expr><CR> neosnippet#expandable() ? "<Plug>(neosnippet_expand_or_jump)" : pumvisible() ? "<C-y>" : "<CR>"
#     " タブキーで補完候補の選択. スニペット内のジャンプもタブキーでジャンプ・・・・・・③
#     " imap <expr><TAB> pumvisible() ? "<C-n>" : neosnippet#jumpable() ? "<Plug>(neosnippet_expand_or_jump)" : "<TAB>"
# '''

# deoplete.nvim >> ddc.vim
[[plugins]]
repo = 'Shougo/ddc.vim'
on_event = 'InsertEnter'
depends = ['denops.vim']
hook_source = '''
call ddc#custom#patch_global('ui', 'native')
call ddc#custom#patch_global('sources', ['vim-lsp', 'vsnip', 'omni', 'buffer', 'file', 'around'])
" call ddc#custom#patch_filetype(['typescript', 'go', 'rust'], 'sources', ['vim-lsp', 'vsnip'])
" call ddc#custom#patch_filetype(['ruby', 'vim'], 'sources', ['vsnip'])

" Use matcher, sorter, converter.
call ddc#custom#patch_global('sourceOptions', {
	\ '_': {
	\   'matchers': ['matcher_head'],
	\   'sorters': ['sorter_rank'],
	\   'converters': ['converter_remove_overlap']
	\ },
	\ })

" Change source options
call ddc#custom#patch_global('sourceOptions', {
	\ 'vim-lsp': {
	\   'mark': 'LSP',
	\   'matchers': ['matcher_head'],
	\   'forceCompletionPattern': '\.|:|->|"\w+/*'
	\ },
	\ 'around': {'mark': 'Around'},
	\ 'buffer': {'mark': 'Buffer'},
	\ 'file': {
	\   'mark': 'File',
	\   'isVolatile': v:true,
	\   'forceCompletionPattern': '\S/\S*'
	\ },
	\ 'omni': {
	\   'mark': 'Omni',
	\   'forceCompletionPattern': '\.\w*|:\w*|->\w*',
	\   'minAutoCompleteLength': 1,
	\ },
	\ })
call ddc#custom#patch_global('sourceParams', {
	\ 'buffer': {
	\   'requireSameFiletype': v:false,
	\   'limitBytes': 5000000,
	\   'fromAltBuf': v:true,
	\   'forceCollect': v:true,
	\ },
	\ })

"\   'minAutoCompleteLength': 1,
#     " 3文字以上の単語に対して補完を有効にする
"'minKeywordLength': 3,

" auto completion settings
call ddc#custom#patch_global('completionMenu', 'pum.vim')
call ddc#custom#patch_global('autoCompleteEvents', [
    \ 'InsertEnter', 'TextChangedI', 'TextChangedP',
    \ 'CmdlineEnter', 'CmdlineChanged',
    \ ])

" Use ddc.
call ddc#enable()
'''

# Install UIs
[[plugins]]
repo = 'Shougo/ddc-ui-native'
on_source = 'ddc.vim'
[[plugins]]
repo = 'Shougo/ddc-ui-inline'
on_source = 'ddc.vim'

# Install matchers, sorters and converters.
[[plugins]]
repo = 'Shougo/ddc-matcher_head'
on_source = 'ddc.vim'
[[plugins]]
repo = 'Shougo/ddc-sorter_rank'
on_source = 'ddc.vim'
[[plugins]]
repo = 'Shougo/ddc-converter_remove_overlap'
on_source = 'ddc.vim'

# Install sources
[[plugins]]
repo = 'Shougo/ddc-around'
on_source = 'ddc.vim'
[[plugins]]
repo = 'Shougo/ddc-omni'
on_source = 'ddc.vim'
[[plugins]]
repo = 'matsui54/ddc-buffer'
on_source = 'ddc.vim'
[[plugins]]
repo = 'LumaKernel/ddc-file'
on_source = 'ddc.vim'

# Install auto completes
[[plugins]]
repo = 'shun/ddc-vim-lsp'
on_source = 'ddc.vim'
depends = 'vim-lsp'
[[plugins]]
repo = 'prabirshrestha/vim-lsp'
hook_source = '''
augroup lsp_install
  autocmd!
  autocmd User lsp_buffer_enabled call s:on_lsp_buffer_enabled()
augroup END

let g:lsp_diagnostics_echo_cursor = 1
'''
[[plugins]]
repo = 'mattn/vim-lsp-settings'
on_source = 'ddc.vim'
hook_source = '''
let g:lsp_settings_filetype_typescript = ['typescript-language-server', 'eslint-language-server', 'deno']
let g:lsp_settings_root_markers = [
\   '.git',
\   '.git/',
\   '.svn',
\   '.hg',
\   '.bzr'
\ ]
'''

# Install snippets
[[plugins]]
repo = 'hrsh7th/vim-vsnip'
on_event = 'InsertEnter'
depends = ['vim-vsnip-integ', 'friendly-snippets']
hook_add = '''
imap <expr> <C-j> vsnip#expandable() ? '<Plug>(vsnip-expand)' : '<C-j>'
smap <expr> <C-j> vsnip#expandable() ? '<Plug>(vsnip-expand)' : '<C-j>'
imap <expr> <C-f> vsnip#jumpable(1)  ? '<Plug>(vsnip-jump-next)' : '<C-f>'
smap <expr> <C-f> vsnip#jumpable(1)  ? '<Plug>(vsnip-jump-next)' : '<C-f>'
imap <expr> <C-b> vsnip#jumpable(-1) ? '<Plug>(vsnip-jump-prev)' : '<C-b>'
smap <expr> <C-b> vsnip#jumpable(-1) ? '<Plug>(vsnip-jump-prev)' : '<C-b>'
let g:vsnip_filetypes = {}
'''
[[plugins]]
repo = 'hrsh7th/vim-vsnip-integ'
on_source = 'vim-vsnip'
[[plugins]]
repo = 'rafamadriz/friendly-snippets'
on_source = 'vim-vsnip'

# Install others
[[plugins]]
repo = 'Shougo/pum.vim'
on_source = 'ddc.vim'
hook_add = '''
inoremap <silent><expr> <TAB>
	\ pumvisible() ? '<C-n>' :
	\ (col('.') <= 1 <Bar><Bar> getline('.')[col('.') - 2] =~# '\s') ?
	\ '<TAB>' : ddc#map#manual_complete()
inoremap <PageDown> <Cmd>call pum#map#insert_relative_page(+1)<CR>
inoremap <PageUp>   <Cmd>call pum#map#insert_relative_page(-1)<CR>
inoremap <C-n>   <Cmd>call pum#map#select_relative(+1)<CR>
inoremap <C-p>   <Cmd>call pum#map#select_relative(-1)<CR>
inoremap <C-y>   <Cmd>call pum#map#confirm()<CR>
inoremap <C-e>   <Cmd>call pum#map#cancel()<CR>
inoremap <S-Tab> <Cmd>call pum#map#insert_relative(-1)<CR>
'''
[[plugins]]
repo = 'matsui54/denops-signature_help'
on_source = 'ddc.vim'
hook_source = '''
call signature_help#enable()
'''
[[plugins]]
repo = 'matsui54/denops-popup-preview.vim'
on_source = 'ddc.vim'
hook_source = '''
call popup_preview#enable()
'''

[[plugins]]
repo = 'Shougo/context_filetype.vim'
[[plugins]]
repo = 'osyo-manga/vim-precious'
depends = ['context_filetype.vim']
